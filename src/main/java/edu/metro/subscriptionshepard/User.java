package edu.metro.subscriptionshepard;

// Import JPA annotations to map this class to a database table
import jakarta.persistence.*;
// Import JsonIgnore to avoid circular references when converting to JSON
import com.fasterxml.jackson.annotation.JsonIgnore;
// Import ArrayList and List for storing user subscriptions
import java.util.ArrayList;
import java.util.List;

// Mark this class as a JPA entity so it is stored in the database
@Entity
// Set the table name in the database as users
@Table(name = "users")
public class User {

    // This is the primary key for the users table and is auto-generated by the database
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // The username must be unique and cannot be null in the database
    @Column(nullable = false, unique = true)
    private String username;

    // The password cannot be null in the database
    @Column(nullable = false)
    private String password;

    // One user can have many subscriptions
    // mappedBy means the Subscription entity has a field named user
    // CascadeType.ALL means changes to the user will affect all their subscriptions
    // orphanRemoval true means if a subscription is removed from the list it is also deleted from the database
    // JsonIgnore prevents infinite recursion when converting user and subscriptions to JSON
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnore
    private List<Subscription> subscriptions = new ArrayList<>();

    // Default constructor required by JPA
    public User() {}

    // Constructor to create a user with a username and password
    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    // Getter for the user id
    public Long getId() { return id; }
    // Setter for the user id
    public void setId(Long id) { this.id = id; }

    // Getter for the username
    public String getUsername() { return username; }
    // Setter for the username
    public void setUsername(String username) { this.username = username; }

    // Getter for the password
    public String getPassword() { return password; }
    // Setter for the password
    public void setPassword(String password) { this.password = password; }

    // Getter for the user's list of subscriptions
    public List<Subscription> getSubscriptions() { return subscriptions; }
    // Setter for the user's list of subscriptions
    public void setSubscriptions(List<Subscription> subscriptions) { this.subscriptions = subscriptions; }
}
